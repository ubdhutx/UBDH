Linear part:
smult(a,smult(b,G)) = smult(b,smult(a,G))
smult(a,smult(b,smult(c,G))) = smult(b,smult(a,smult(c,G)))
Completing equations...
Completed equations:
smult(c,smult(a,smult(b,G))) = smult(b,smult(a,smult(c,G)))
smult(a,smult(a_1,smult(b,G))) = smult(b,smult(a,smult(a_1,G)))
smult(a,smult(b,smult(b_1,G))) = smult(b,smult(b_1,smult(a,G)))
smult(a,smult(b,smult(c,G))) = smult(b,smult(a,smult(c,G)))
smult(a,smult(b,G)) = smult(b,smult(a,G))
Convergent part: No equation.
Process 0 (that is, the initial process):
{1}new s: sskey;
{2}out(cout, pk(s));
(
    {3}!
    {4}let s_1: sskey = s in
    {5}new c: scalar;
    {6}!
    {7}new chc: channel;
    {8}out(card, chc);
    {9}let c_1: scalar = c in
    {10}let ch: channel = chc in
    {11}new a: scalar;
    {12}event snd1(smult(a,smult(c_1,G)));
    {13}out(ch, smult(a,smult(c_1,G)));
    {14}in(ch, y: point);
    {15}event rec2(y);
    {16}let k: key = h(smult(a,smult(c_1,y))) in
    {17}let cert: bitstring = (smult(c_1,G),sign(smult(c_1,G),s_1)) in
    {18}let ecert: bitstring = enc(((a,smult(c_1,G)),cert),k) in
    {19}event cardTerm(k,ecert);
    {20}event CRunning(k,smult(a,smult(c_1,G)),y,ecert);
    {21}out(ch, ecert)
) | (
    {22}!
    {23}let s_2: sskey = s in
    {24}new cht: channel;
    {25}out(term, cht);
    {26}let ch_1: channel = cht in
    {27}new t: scalar;
    {28}in(ch_1, z1: point);
    {29}event rec1(z1);
    {30}event snd2(smult(t,G));
    {31}out(ch_1, smult(t,G));
    {32}in(ch_1, z2: bitstring);
    {33}let k_1: key = h(smult(t,z1)) in
    {34}let ((n1: scalar,n2: point),(n3: point,n4: bitstring)) = dec(z2,k_1) in
    {35}if ((n2 = check(n4,pk(s_2))) && (smult(n1,n2) = z1)) then
    {36}event terminalTerm(k_1,z2);
    {37}event TCommit(k_1,z1,smult(t,G),z2)
)

--  Process 1 (that is, process 0, with let moved downwards):
{1}new s: sskey;
{2}out(cout, pk(s));
(
    {3}!
    {5}new c: scalar;
    {6}!
    {7}new chc: channel;
    {8}out(card, chc);
    {11}new a: scalar;
    {9}let c_1: scalar = c in
    {12}event snd1(smult(a,smult(c_1,G)));
    {10}let ch: channel = chc in
    {13}out(ch, smult(a,smult(c_1,G)));
    {14}in(ch, y: point);
    {15}event rec2(y);
    {4}let s_1: sskey = s in
    {17}let cert: bitstring = (smult(c_1,G),sign(smult(c_1,G),s_1)) in
    {16}let k: key = h(smult(a,smult(c_1,y))) in
    {18}let ecert: bitstring = enc(((a,smult(c_1,G)),cert),k) in
    {19}event cardTerm(k,ecert);
    {20}event CRunning(k,smult(a,smult(c_1,G)),y,ecert);
    {21}out(ch, ecert)
) | (
    {22}!
    {24}new cht: channel;
    {25}out(term, cht);
    {27}new t: scalar;
    {26}let ch_1: channel = cht in
    {28}in(ch_1, z1: point);
    {29}event rec1(z1);
    {30}event snd2(smult(t,G));
    {31}out(ch_1, smult(t,G));
    {32}in(ch_1, z2: bitstring);
    {33}let k_1: key = h(smult(t,z1)) in
    {34}let ((n1: scalar,n2: point),(n3: point,n4: bitstring)) = dec(z2,k_1) in
    {23}let s_2: sskey = s in
    {35}if ((n2 = check(n4,pk(s_2))) && (smult(n1,n2) = z1)) then
    {36}event terminalTerm(k_1,z2);
    {37}event TCommit(k_1,z1,smult(t,G),z2)
)

-- Query inj-event(TCommit(k_2,z1_1,z2_1,m)) ==> inj-event(CRunning(k_2,z1_1,z2_1,m)) in process 1.
Translating the process into Horn clauses...
select mess(chc[!2 = *@sid,!1 = *@sid_1],y_1)/-5000
Completing...
200 rules inserted. Base: 138 rules (36 with conclusion selected). Queue: 74 rules.
400 rules inserted. Base: 280 rules (73 with conclusion selected). Queue: 145 rules.
600 rules inserted. Base: 407 rules (110 with conclusion selected). Queue: 276 rules.
800 rules inserted. Base: 516 rules (128 with conclusion selected). Queue: 275 rules.
1000 rules inserted. Base: 585 rules (148 with conclusion selected). Queue: 488 rules.
1200 rules inserted. Base: 670 rules (169 with conclusion selected). Queue: 802 rules.
1400 rules inserted. Base: 731 rules (202 with conclusion selected). Queue: 1146 rules.
1600 rules inserted. Base: 841 rules (205 with conclusion selected). Queue: 1622 rules.
1800 rules inserted. Base: 922 rules (229 with conclusion selected). Queue: 2325 rules.
2000 rules inserted. Base: 1016 rules (268 with conclusion selected). Queue: 2473 rules.
2200 rules inserted. Base: 1079 rules (296 with conclusion selected). Queue: 2633 rules.
2400 rules inserted. Base: 1190 rules (314 with conclusion selected). Queue: 2687 rules.
2600 rules inserted. Base: 1324 rules (322 with conclusion selected). Queue: 2559 rules.
2800 rules inserted. Base: 1520 rules (340 with conclusion selected). Queue: 2424 rules.
3000 rules inserted. Base: 1604 rules (358 with conclusion selected). Queue: 2411 rules.
3200 rules inserted. Base: 1713 rules (394 with conclusion selected). Queue: 2376 rules.
3400 rules inserted. Base: 1791 rules (397 with conclusion selected). Queue: 2361 rules.
3600 rules inserted. Base: 1805 rules (403 with conclusion selected). Queue: 2379 rules.
3800 rules inserted. Base: 1868 rules (424 with conclusion selected). Queue: 2333 rules.
4000 rules inserted. Base: 1941 rules (450 with conclusion selected). Queue: 2429 rules.
4200 rules inserted. Base: 2016 rules (476 with conclusion selected). Queue: 2399 rules.
4400 rules inserted. Base: 2097 rules (509 with conclusion selected). Queue: 2413 rules.
4600 rules inserted. Base: 2155 rules (510 with conclusion selected). Queue: 2201 rules.
4800 rules inserted. Base: 2047 rules (525 with conclusion selected). Queue: 2115 rules.
5000 rules inserted. Base: 2100 rules (551 with conclusion selected). Queue: 2109 rules.
5200 rules inserted. Base: 2188 rules (595 with conclusion selected). Queue: 2065 rules.
5400 rules inserted. Base: 2249 rules (614 with conclusion selected). Queue: 1991 rules.
5600 rules inserted. Base: 2322 rules (648 with conclusion selected). Queue: 1902 rules.
5800 rules inserted. Base: 2420 rules (667 with conclusion selected). Queue: 1801 rules.
6000 rules inserted. Base: 2493 rules (705 with conclusion selected). Queue: 1721 rules.
6200 rules inserted. Base: 2570 rules (718 with conclusion selected). Queue: 1631 rules.
6400 rules inserted. Base: 2720 rules (753 with conclusion selected). Queue: 1577 rules.
6600 rules inserted. Base: 2820 rules (787 with conclusion selected). Queue: 1543 rules.
6800 rules inserted. Base: 2817 rules (798 with conclusion selected). Queue: 1432 rules.
7000 rules inserted. Base: 2678 rules (832 with conclusion selected). Queue: 1262 rules.
7200 rules inserted. Base: 2767 rules (866 with conclusion selected). Queue: 1285 rules.
7400 rules inserted. Base: 2894 rules (892 with conclusion selected). Queue: 1322 rules.
7600 rules inserted. Base: 3004 rules (926 with conclusion selected). Queue: 1334 rules.
7800 rules inserted. Base: 3154 rules (950 with conclusion selected). Queue: 1318 rules.
8000 rules inserted. Base: 3300 rules (986 with conclusion selected). Queue: 1370 rules.
8200 rules inserted. Base: 3358 rules (1046 with conclusion selected). Queue: 1430 rules.
8400 rules inserted. Base: 3500 rules (1062 with conclusion selected). Queue: 1426 rules.
8600 rules inserted. Base: 3700 rules (1062 with conclusion selected). Queue: 1378 rules.
8800 rules inserted. Base: 3880 rules (1070 with conclusion selected). Queue: 1362 rules.
9000 rules inserted. Base: 4054 rules (1078 with conclusion selected). Queue: 1318 rules.
9200 rules inserted. Base: 4254 rules (1078 with conclusion selected). Queue: 1278 rules.
9400 rules inserted. Base: 4428 rules (1082 with conclusion selected). Queue: 1244 rules.
9600 rules inserted. Base: 4558 rules (1102 with conclusion selected). Queue: 1264 rules.
9800 rules inserted. Base: 4726 rules (1110 with conclusion selected). Queue: 1248 rules.
10000 rules inserted. Base: 4918 rules (1110 with conclusion selected). Queue: 1171 rules.
10200 rules inserted. Base: 5114 rules (1110 with conclusion selected). Queue: 1124 rules.
10400 rules inserted. Base: 5298 rules (1110 with conclusion selected). Queue: 1034 rules.
10600 rules inserted. Base: 5490 rules (1110 with conclusion selected). Queue: 948 rules.
10800 rules inserted. Base: 5690 rules (1110 with conclusion selected). Queue: 922 rules.
11000 rules inserted. Base: 5884 rules (1110 with conclusion selected). Queue: 872 rules.
11200 rules inserted. Base: 6062 rules (1110 with conclusion selected). Queue: 784 rules.
11400 rules inserted. Base: 6237 rules (1110 with conclusion selected). Queue: 704 rules.
11600 rules inserted. Base: 6406 rules (1110 with conclusion selected). Queue: 640 rules.
11800 rules inserted. Base: 6594 rules (1110 with conclusion selected). Queue: 550 rules.
12000 rules inserted. Base: 6758 rules (1110 with conclusion selected). Queue: 466 rules.
12200 rules inserted. Base: 6930 rules (1110 with conclusion selected). Queue: 338 rules.
12400 rules inserted. Base: 7090 rules (1110 with conclusion selected). Queue: 262 rules.
12600 rules inserted. Base: 7238 rules (1110 with conclusion selected). Queue: 134 rules.
Starting query inj-event(TCommit(k_2,z1_1,z2_1,m)) ==> inj-event(CRunning(k_2,z1_1,z2_1,m))
goal reachable: begin(CRunning(h(smult(c_2,smult(t_1,smult(a_1,G)))),smult(c_2,smult(a_1,G)),smult(t_1,G),enc(((a_1,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G)))))),@occ20_1) -> end(@occ37_1,TCommit(h(smult(c_2,smult(t_1,smult(a_1,G)))),smult(c_2,smult(a_1,G)),smult(t_1,G),enc(((a_1,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G)))))))
The hypothesis occurs strictly before the conclusion.
Abbreviations:
a_1 = a[!2 = @sid,!1 = @sid_1]
c_2 = c[!1 = @sid_1]
t_1 = t[!1 = @sid_2]
@occ37_1 = @occ37[z2 = enc(((a_1,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G))))),z1 = smult(c_2,smult(a_1,G)),!1 = @sid_2]
@occ20_1 = @occ20[y = smult(t_1,G),!2 = @sid,!1 = @sid_1]
RESULT inj-event(TCommit(k_2,z1_1,z2_1,m)) ==> inj-event(CRunning(k_2,z1_1,z2_1,m)) is true.
-- Query not event(TCommit(k_2,z1_1,z2_1,m)) in process 1.
Translating the process into Horn clauses...
select mess(chc[!2 = *@sid,!1 = *@sid_1],y_1)/-5000
Completing...
200 rules inserted. Base: 163 rules (49 with conclusion selected). Queue: 77 rules.
400 rules inserted. Base: 259 rules (69 with conclusion selected). Queue: 70 rules.
600 rules inserted. Base: 309 rules (84 with conclusion selected). Queue: 155 rules.
800 rules inserted. Base: 359 rules (95 with conclusion selected). Queue: 85 rules.
Starting query not event(TCommit(k_2,z1_1,z2_1,m))
goal reachable: end(TCommit(h(smult(c_2,smult(t_1,smult(a_1,G)))),smult(c_2,smult(a_1,G)),smult(t_1,G),enc(((a_1,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G)))))))
Abbreviations:
c_2 = c[!1 = @sid]
t_1 = t[!1 = @sid_1]
a_1 = a[!2 = @sid_2,!1 = @sid]

Derivation:
Abbreviations:
c_2 = c[!1 = @sid]
t_1 = t[!1 = @sid_1]
a_1 = a[!2 = @sid_2,!1 = @sid]
cht_1 = cht[!1 = @sid_1]
chc_1 = chc[!2 = @sid_2,!1 = @sid]

1. The message chc_1 may be sent to the attacker at output {8}.
attacker(chc_1).

2. The message smult(c_2,smult(a_1,G)) may be sent on channel chc_1 at output {13}.
mess(chc_1,smult(c_2,smult(a_1,G))).

3. By 1, the attacker may have the channel chc_1.
By 2, the message smult(c_2,smult(a_1,G)) may be sent on this channel.
So the attacker may obtain the message smult(c_2,smult(a_1,G)) by listening on this channel.
attacker(smult(c_2,smult(a_1,G))).

4. The message cht_1 may be sent to the attacker at output {25}.
attacker(cht_1).

5. By 4, the attacker may have the channel cht_1.
By 3, the attacker may have the message smult(c_2,smult(a_1,G)).
So the attacker may send this message on this channel.
mess(cht_1,smult(c_2,smult(a_1,G))).

6. The attacker has some term z1_1.
attacker(z1_1).

7. By 4, the attacker may have the channel cht_1.
By 6, the attacker may have the message z1_1.
So the attacker may send this message on this channel.
mess(cht_1,z1_1).

8. The message z1_1 that may be sent on channel cht_1 by 7 may be received at input {28}.
So the message smult(t_1,G) may be sent on channel cht_1 at output {31}.
mess(cht_1,smult(t_1,G)).

9. By 4, the attacker may have the channel cht_1.
By 8, the message smult(t_1,G) may be sent on this channel.
So the attacker may obtain the message smult(t_1,G) by listening on this channel.
attacker(smult(t_1,G)).

10. By 1, the attacker may have the channel chc_1.
By 9, the attacker may have the message smult(t_1,G).
So the attacker may send this message on this channel.
mess(chc_1,smult(t_1,G)).

11. The message smult(t_1,G) that may be sent on channel chc_1 by 10 may be received at input {14}.
So the message enc(((a_1,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G))))) may be sent on channel chc_1 at output {21}.
mess(chc_1,enc(((a_1,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G)))))).

12. By 1, the attacker may have the channel chc_1.
By 11, the message enc(((a_1,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G))))) may be sent on this channel.
So the attacker may obtain the message enc(((a_1,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G))))) by listening on this channel.
attacker(enc(((a_1,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G)))))).

13. By 4, the attacker may have the channel cht_1.
By 12, the attacker may have the message enc(((a_1,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G))))).
So the attacker may send this message on this channel.
mess(cht_1,enc(((a_1,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G)))))).

14. The message smult(c_2,smult(a_1,G)) that may be sent on channel cht_1 by 5 may be received at input {28}.
The message enc(((a_1,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G))))) that may be sent on channel cht_1 by 13 may be received at input {32}.
So event TCommit(h(smult(c_2,smult(t_1,smult(a_1,G)))),smult(c_2,smult(a_1,G)),smult(t_1,G),enc(((a_1,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G)))))) may be executed at {37}.
end(TCommit(h(smult(c_2,smult(t_1,smult(a_1,G)))),smult(c_2,smult(a_1,G)),smult(t_1,G),enc(((a_1,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G))))))).

15. By 14, end(TCommit(h(smult(c_2,smult(t_1,smult(a_1,G)))),smult(c_2,smult(a_1,G)),smult(t_1,G),enc(((a_1,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G))))))).
The goal is reached, represented in the following fact:
end(TCommit(h(smult(c_2,smult(t_1,smult(a_1,G)))),smult(c_2,smult(a_1,G)),smult(t_1,G),enc(((a_1,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G))))))).


Unified z1_1 with smult(c[!1 = @sid],smult(a[!2 = @sid_2,!1 = @sid],G))
Iterating unifyDerivation.
Fixpoint reached: nothing more to unify.
The clause after unifyDerivation is
end(TCommit(h(smult(c[!1 = @sid],smult(t[!1 = @sid_1],smult(a[!2 = @sid_2,!1 = @sid],G)))),smult(c[!1 = @sid],smult(a[!2 = @sid_2,!1 = @sid],G)),smult(t[!1 = @sid_1],G),enc(((a[!2 = @sid_2,!1 = @sid],smult(c[!1 = @sid],G)),(smult(c[!1 = @sid],G),sign(smult(c[!1 = @sid],G),s[]))),h(smult(c[!1 = @sid],smult(t[!1 = @sid_1],smult(a[!2 = @sid_2,!1 = @sid],G)))))))
This clause still contradicts the query.
A more detailed output of the traces is available with
  set traceDisplay = long.

new s: sskey creating s_3 at {1}

out(cout, ~M) with ~M = pk(s_3) at {2}

new cht: channel creating cht_1 at {24} in copy a_1

out(term, ~M_1) with ~M_1 = cht_1 at {25} in copy a_1

new t: scalar creating t_1 at {27} in copy a_1

new c: scalar creating c_2 at {5} in copy a_2

new chc: channel creating chc_1 at {7} in copy a_2, a_3

out(card, ~M_2) with ~M_2 = chc_1 at {8} in copy a_2, a_3

new a: scalar creating a_4 at {11} in copy a_2, a_3

event snd1(smult(a_4,smult(c_2,G))) at {12} in copy a_2, a_3

out(chc_1, ~M_3) with ~M_3 = smult(a_4,smult(c_2,G)) at {13} in copy a_2, a_3

in(cht_1, ~M_3) with ~M_3 = smult(c_2,smult(a_4,G)) at {28} in copy a_1

event rec1(smult(c_2,smult(a_4,G))) at {29} in copy a_1

event snd2(smult(t_1,G)) at {30} in copy a_1

out(cht_1, ~M_4) with ~M_4 = smult(t_1,G) at {31} in copy a_1

in(chc_1, ~M_4) with ~M_4 = smult(t_1,G) at {14} in copy a_2, a_3

event rec2(smult(t_1,G)) at {15} in copy a_2, a_3

event cardTerm(h(smult(a_4,smult(c_2,smult(t_1,G)))),enc(((a_4,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s_3))),h(smult(a_4,smult(c_2,smult(t_1,G)))))) at {19} in copy a_2, a_3

event CRunning(h(smult(a_4,smult(c_2,smult(t_1,G)))),smult(a_4,smult(c_2,G)),smult(t_1,G),enc(((a_4,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s_3))),h(smult(a_4,smult(c_2,smult(t_1,G)))))) at {20} in copy a_2, a_3

out(chc_1, ~M_5) with ~M_5 = enc(((a_4,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s_3))),h(smult(a_4,smult(c_2,smult(t_1,G))))) at {21} in copy a_2, a_3

in(cht_1, ~M_5) with ~M_5 = enc(((a_4,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s_3))),h(smult(c_2,smult(t_1,smult(a_4,G))))) at {32} in copy a_1

event terminalTerm(h(smult(t_1,smult(c_2,smult(a_4,G)))),enc(((a_4,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s_3))),h(smult(c_2,smult(t_1,smult(a_4,G)))))) at {36} in copy a_1

event TCommit(h(smult(t_1,smult(c_2,smult(a_4,G)))),smult(c_2,smult(a_4,G)),smult(t_1,G),enc(((a_4,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s_3))),h(smult(c_2,smult(t_1,smult(a_4,G)))))) at {37} in copy a_1 (goal)

The event TCommit(h(smult(c_2,smult(t_1,smult(a_4,G)))),smult(c_2,smult(a_4,G)),smult(t_1,G),enc(((a_4,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s_3))),h(smult(c_2,smult(t_1,smult(a_4,G)))))) is executed at {37} in copy a_1.
A trace has been found.
RESULT not event(TCommit(k_2,z1_1,z2_1,m)) is false.
-- Query inj-event(terminalTerm(k_2,z2_1)) ==> (inj-event(rec1(z1_1)) ==> inj-event(snd1(z1_1))) in process 1.
Translating the process into Horn clauses...
select mess(chc[!2 = *@sid,!1 = *@sid_1],y_1)/-5000
Completing...
200 rules inserted. Base: 156 rules (52 with conclusion selected). Queue: 96 rules.
400 rules inserted. Base: 303 rules (123 with conclusion selected). Queue: 181 rules.
600 rules inserted. Base: 444 rules (136 with conclusion selected). Queue: 267 rules.
800 rules inserted. Base: 614 rules (194 with conclusion selected). Queue: 333 rules.
1000 rules inserted. Base: 740 rules (197 with conclusion selected). Queue: 398 rules.
1200 rules inserted. Base: 834 rules (208 with conclusion selected). Queue: 486 rules.
1400 rules inserted. Base: 983 rules (214 with conclusion selected). Queue: 563 rules.
1600 rules inserted. Base: 1073 rules (238 with conclusion selected). Queue: 741 rules.
1800 rules inserted. Base: 1206 rules (259 with conclusion selected). Queue: 773 rules.
2000 rules inserted. Base: 1295 rules (282 with conclusion selected). Queue: 819 rules.
2200 rules inserted. Base: 1382 rules (292 with conclusion selected). Queue: 812 rules.
2400 rules inserted. Base: 1525 rules (310 with conclusion selected). Queue: 672 rules.
2600 rules inserted. Base: 1605 rules (318 with conclusion selected). Queue: 599 rules.
2800 rules inserted. Base: 1663 rules (344 with conclusion selected). Queue: 546 rules.
3000 rules inserted. Base: 1726 rules (352 with conclusion selected). Queue: 407 rules.
3200 rules inserted. Base: 1763 rules (388 with conclusion selected). Queue: 369 rules.
3400 rules inserted. Base: 1863 rules (414 with conclusion selected). Queue: 343 rules.
3600 rules inserted. Base: 1989 rules (440 with conclusion selected). Queue: 363 rules.
3800 rules inserted. Base: 2171 rules (472 with conclusion selected). Queue: 322 rules.
4000 rules inserted. Base: 2353 rules (480 with conclusion selected). Queue: 291 rules.
4200 rules inserted. Base: 2553 rules (480 with conclusion selected). Queue: 215 rules.
4400 rules inserted. Base: 2753 rules (480 with conclusion selected). Queue: 115 rules.
Starting query inj-event(terminalTerm(k_2,z2_1)) ==> (inj-event(rec1(z1_1)) ==> inj-event(snd1(z1_1)))
goal reachable: begin(@p_act(@occ14_1,smult(t_1,G))) && begin(@p_act(@occ32_1,enc(((a_1,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G))))))) && begin(rec1(smult(c_2,smult(a_1,G))),@occ29_1) && begin(snd1(smult(c_2,smult(a_1,G))),@occ12_1) -> end(@occ36_1,terminalTerm(h(smult(c_2,smult(t_1,smult(a_1,G)))),enc(((a_1,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G)))))))
The 1st, 2nd, 3rd, 4th hypotheses occur strictly before the conclusion.
Abbreviations:
a_1 = a[!2 = @sid,!1 = @sid_1]
c_2 = c[!1 = @sid_1]
t_1 = t[!1 = @sid_2]
@occ36_1 = @occ36[z2 = enc(((a_1,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G))))),z1 = smult(c_2,smult(a_1,G)),!1 = @sid_2]
@occ14_1 = @occ14[!2 = @sid,!1 = @sid_1]
@occ32_1 = @occ32[!1 = @sid_2]
@occ29_1 = @occ29[z1 = smult(c_2,smult(a_1,G)),!1 = @sid_2]
@occ12_1 = @occ12[!2 = @sid,!1 = @sid_1]
goal reachable: begin(@p_act(@occ14_1,smult(t_1,G))) && begin(@p_act(@occ32_1,enc(((a_1,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G))))))) && begin(rec1(smult(c_2,smult(a_1,G))),@occ29_1) && begin(snd1(smult(c_2,smult(a_1,G))),@occ12_1) && begin(snd1(smult(a_1,smult(c_2,G))),@occ12_1) -> end(@occ36_1,terminalTerm(h(smult(c_2,smult(t_1,smult(a_1,G)))),enc(((a_1,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G))))))) && end(@occ29_1,rec1(smult(c_2,smult(a_1,G))))
The 1st, 2nd, 3rd, 4th, 5th hypotheses occur strictly before the 1st conclusion.
The 5th hypothesis occurs strictly before the 2nd conclusion.
Abbreviations:
a_1 = a[!2 = @sid,!1 = @sid_1]
c_2 = c[!1 = @sid_1]
t_1 = t[!1 = @sid_2]
@occ36_1 = @occ36[z2 = enc(((a_1,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G))))),z1 = smult(c_2,smult(a_1,G)),!1 = @sid_2]
@occ29_1 = @occ29[z1 = smult(c_2,smult(a_1,G)),!1 = @sid_2]
@occ14_1 = @occ14[!2 = @sid,!1 = @sid_1]
@occ32_1 = @occ32[!1 = @sid_2]
@occ12_1 = @occ12[!2 = @sid,!1 = @sid_1]
RESULT inj-event(terminalTerm(k_2,z2_1)) ==> (inj-event(rec1(z1_1)) ==> inj-event(snd1(z1_1))) is true.
-- Query inj-event(terminalTerm(k_2,z2_1)) ==> (inj-event(rec2(y_1)) ==> inj-event(snd2(y_1))) in process 1.
Translating the process into Horn clauses...
select mess(chc[!2 = *@sid,!1 = *@sid_1],y_1)/-5000
Completing...
200 rules inserted. Base: 161 rules (54 with conclusion selected). Queue: 73 rules.
400 rules inserted. Base: 291 rules (73 with conclusion selected). Queue: 162 rules.
600 rules inserted. Base: 392 rules (89 with conclusion selected). Queue: 194 rules.
800 rules inserted. Base: 479 rules (104 with conclusion selected). Queue: 308 rules.
1000 rules inserted. Base: 590 rules (118 with conclusion selected). Queue: 331 rules.
1200 rules inserted. Base: 688 rules (131 with conclusion selected). Queue: 242 rules.
1400 rules inserted. Base: 740 rules (139 with conclusion selected). Queue: 143 rules.
1600 rules inserted. Base: 835 rules (161 with conclusion selected). Queue: 116 rules.
1800 rules inserted. Base: 1022 rules (173 with conclusion selected). Queue: 44 rules.
Starting query inj-event(terminalTerm(k_2,z2_1)) ==> (inj-event(rec2(y_1)) ==> inj-event(snd2(y_1)))
goal reachable: begin(rec2(smult(t_1,G)),@occ15_1) && begin(@p_act(@occ32_2,enc(((a_1,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G))))))) && begin(snd2(smult(t_1,G)),@occ30_1) -> end(@occ36_2,terminalTerm(h(smult(c_2,smult(t_1,smult(a_1,G)))),enc(((a_1,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G)))))))
The 1st, 2nd, 3rd hypotheses occur strictly before the conclusion.
Abbreviations:
a_1 = a[!2 = @sid,!1 = @sid_1]
c_2 = c[!1 = @sid_1]
t_1 = t[!1 = @sid_2]
@occ36_2 = @occ36_1[z2 = enc(((a_1,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G))))),z1 = smult(c_2,smult(a_1,G)),!1 = @sid_2]
@occ15_1 = @occ15[y = smult(t_1,G),!2 = @sid,!1 = @sid_1]
@occ32_2 = @occ32_1[!1 = @sid_2]
@occ30_1 = @occ30[z1 = smult(c_2,smult(a_1,G)),!1 = @sid_2]
goal reachable: begin(rec2(smult(t_1,G)),@occ15_1) && begin(@p_act(@occ32_2,enc(((a_1,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G))))))) && begin(snd2(smult(t_1,G)),@occ30_1) && begin(snd2(smult(t_1,G)),@occ30_2) && attacker(z1_1) -> end(@occ36_2,terminalTerm(h(smult(c_2,smult(t_1,smult(a_1,G)))),enc(((a_1,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G))))))) && end(@occ15_1,rec2(smult(t_1,G)))
The 1st, 2nd, 3rd, 4th, 5th hypotheses occur strictly before the 1st conclusion.
The 4th hypothesis occurs strictly before the 2nd conclusion.
The 5th hypothesis occurs before the 2nd conclusion.
Abbreviations:
a_1 = a[!2 = @sid,!1 = @sid_1]
c_2 = c[!1 = @sid_1]
t_1 = t[!1 = @sid_2]
@occ36_2 = @occ36_1[z2 = enc(((a_1,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G))))),z1 = smult(c_2,smult(a_1,G)),!1 = @sid_2]
@occ15_1 = @occ15[y = smult(t_1,G),!2 = @sid,!1 = @sid_1]
@occ32_2 = @occ32_1[!1 = @sid_2]
@occ30_1 = @occ30[z1 = smult(c_2,smult(a_1,G)),!1 = @sid_2]
@occ30_2 = @occ30[z1 = z1_1,!1 = @sid_2]
RESULT inj-event(terminalTerm(k_2,z2_1)) ==> (inj-event(rec2(y_1)) ==> inj-event(snd2(y_1))) is true.
-- Query inj-event(terminalTerm(k_2,z2_1)) ==> inj-event(cardTerm(k_2,z2_1)) in process 1.
Translating the process into Horn clauses...
select mess(chc[!2 = *@sid,!1 = *@sid_1],y_1)/-5000
Completing...
200 rules inserted. Base: 160 rules (53 with conclusion selected). Queue: 73 rules.
400 rules inserted. Base: 287 rules (72 with conclusion selected). Queue: 167 rules.
600 rules inserted. Base: 387 rules (90 with conclusion selected). Queue: 246 rules.
800 rules inserted. Base: 480 rules (109 with conclusion selected). Queue: 497 rules.
1000 rules inserted. Base: 568 rules (124 with conclusion selected). Queue: 748 rules.
1200 rules inserted. Base: 660 rules (156 with conclusion selected). Queue: 1020 rules.
1400 rules inserted. Base: 749 rules (160 with conclusion selected). Queue: 978 rules.
1600 rules inserted. Base: 888 rules (178 with conclusion selected). Queue: 896 rules.
1800 rules inserted. Base: 937 rules (184 with conclusion selected). Queue: 902 rules.
2000 rules inserted. Base: 1015 rules (206 with conclusion selected). Queue: 911 rules.
2200 rules inserted. Base: 1066 rules (210 with conclusion selected). Queue: 782 rules.
2400 rules inserted. Base: 1096 rules (227 with conclusion selected). Queue: 714 rules.
2600 rules inserted. Base: 1135 rules (249 with conclusion selected). Queue: 669 rules.
2800 rules inserted. Base: 1213 rules (262 with conclusion selected). Queue: 559 rules.
3000 rules inserted. Base: 1320 rules (280 with conclusion selected). Queue: 476 rules.
3200 rules inserted. Base: 1319 rules (303 with conclusion selected). Queue: 415 rules.
3400 rules inserted. Base: 1433 rules (326 with conclusion selected). Queue: 400 rules.
3600 rules inserted. Base: 1537 rules (352 with conclusion selected). Queue: 389 rules.
3800 rules inserted. Base: 1717 rules (356 with conclusion selected). Queue: 341 rules.
4000 rules inserted. Base: 1867 rules (364 with conclusion selected). Queue: 307 rules.
4200 rules inserted. Base: 2059 rules (364 with conclusion selected). Queue: 237 rules.
4400 rules inserted. Base: 2239 rules (364 with conclusion selected). Queue: 167 rules.
4600 rules inserted. Base: 2414 rules (364 with conclusion selected). Queue: 70 rules.
Starting query inj-event(terminalTerm(k_2,z2_1)) ==> inj-event(cardTerm(k_2,z2_1))
goal reachable: begin(cardTerm(h(smult(c_2,smult(t_1,smult(a_1,G)))),enc(((a_1,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G)))))),@occ19_1) -> end(@occ36_3,terminalTerm(h(smult(c_2,smult(t_1,smult(a_1,G)))),enc(((a_1,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G)))))))
The hypothesis occurs strictly before the conclusion.
Abbreviations:
a_1 = a[!2 = @sid,!1 = @sid_1]
c_2 = c[!1 = @sid_1]
t_1 = t[!1 = @sid_2]
@occ36_3 = @occ36_2[z2 = enc(((a_1,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G))))),z1 = smult(c_2,smult(a_1,G)),!1 = @sid_2]
@occ19_1 = @occ19[y = smult(t_1,G),!2 = @sid,!1 = @sid_1]
RESULT inj-event(terminalTerm(k_2,z2_1)) ==> inj-event(cardTerm(k_2,z2_1)) is true.
-- Query not event(terminalTerm(k_2,z2_1)) in process 1.
Translating the process into Horn clauses...
select mess(chc[!2 = *@sid,!1 = *@sid_1],y_1)/-5000
Completing...
200 rules inserted. Base: 164 rules (49 with conclusion selected). Queue: 76 rules.
400 rules inserted. Base: 259 rules (69 with conclusion selected). Queue: 86 rules.
600 rules inserted. Base: 315 rules (93 with conclusion selected). Queue: 102 rules.
Starting query not event(terminalTerm(k_2,z2_1))
goal reachable: end(terminalTerm(h(smult(c_2,smult(t_1,smult(a_1,G)))),enc(((a_1,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G)))))))
Abbreviations:
c_2 = c[!1 = @sid]
t_1 = t[!1 = @sid_1]
a_1 = a[!2 = @sid_2,!1 = @sid]

Derivation:
Abbreviations:
c_2 = c[!1 = @sid]
t_1 = t[!1 = @sid_1]
a_1 = a[!2 = @sid_2,!1 = @sid]
cht_1 = cht[!1 = @sid_1]
chc_1 = chc[!2 = @sid_2,!1 = @sid]

1. The message chc_1 may be sent to the attacker at output {8}.
attacker(chc_1).

2. The message smult(c_2,smult(a_1,G)) may be sent on channel chc_1 at output {13}.
mess(chc_1,smult(c_2,smult(a_1,G))).

3. By 1, the attacker may have the channel chc_1.
By 2, the message smult(c_2,smult(a_1,G)) may be sent on this channel.
So the attacker may obtain the message smult(c_2,smult(a_1,G)) by listening on this channel.
attacker(smult(c_2,smult(a_1,G))).

4. The message cht_1 may be sent to the attacker at output {25}.
attacker(cht_1).

5. By 4, the attacker may have the channel cht_1.
By 3, the attacker may have the message smult(c_2,smult(a_1,G)).
So the attacker may send this message on this channel.
mess(cht_1,smult(c_2,smult(a_1,G))).

6. The attacker has some term z1_1.
attacker(z1_1).

7. By 4, the attacker may have the channel cht_1.
By 6, the attacker may have the message z1_1.
So the attacker may send this message on this channel.
mess(cht_1,z1_1).

8. The message z1_1 that may be sent on channel cht_1 by 7 may be received at input {28}.
So the message smult(t_1,G) may be sent on channel cht_1 at output {31}.
mess(cht_1,smult(t_1,G)).

9. By 4, the attacker may have the channel cht_1.
By 8, the message smult(t_1,G) may be sent on this channel.
So the attacker may obtain the message smult(t_1,G) by listening on this channel.
attacker(smult(t_1,G)).

10. By 1, the attacker may have the channel chc_1.
By 9, the attacker may have the message smult(t_1,G).
So the attacker may send this message on this channel.
mess(chc_1,smult(t_1,G)).

11. The message smult(t_1,G) that may be sent on channel chc_1 by 10 may be received at input {14}.
So the message enc(((a_1,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G))))) may be sent on channel chc_1 at output {21}.
mess(chc_1,enc(((a_1,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G)))))).

12. By 1, the attacker may have the channel chc_1.
By 11, the message enc(((a_1,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G))))) may be sent on this channel.
So the attacker may obtain the message enc(((a_1,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G))))) by listening on this channel.
attacker(enc(((a_1,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G)))))).

13. By 4, the attacker may have the channel cht_1.
By 12, the attacker may have the message enc(((a_1,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G))))).
So the attacker may send this message on this channel.
mess(cht_1,enc(((a_1,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G)))))).

14. The message smult(c_2,smult(a_1,G)) that may be sent on channel cht_1 by 5 may be received at input {28}.
The message enc(((a_1,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G))))) that may be sent on channel cht_1 by 13 may be received at input {32}.
So event terminalTerm(h(smult(c_2,smult(t_1,smult(a_1,G)))),enc(((a_1,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G)))))) may be executed at {36}.
end(terminalTerm(h(smult(c_2,smult(t_1,smult(a_1,G)))),enc(((a_1,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G))))))).

15. By 14, end(terminalTerm(h(smult(c_2,smult(t_1,smult(a_1,G)))),enc(((a_1,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G))))))).
The goal is reached, represented in the following fact:
end(terminalTerm(h(smult(c_2,smult(t_1,smult(a_1,G)))),enc(((a_1,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s[]))),h(smult(c_2,smult(t_1,smult(a_1,G))))))).


Unified z1_1 with smult(c[!1 = @sid],smult(a[!2 = @sid_2,!1 = @sid],G))
Iterating unifyDerivation.
Fixpoint reached: nothing more to unify.
The clause after unifyDerivation is
end(terminalTerm(h(smult(c[!1 = @sid],smult(t[!1 = @sid_1],smult(a[!2 = @sid_2,!1 = @sid],G)))),enc(((a[!2 = @sid_2,!1 = @sid],smult(c[!1 = @sid],G)),(smult(c[!1 = @sid],G),sign(smult(c[!1 = @sid],G),s[]))),h(smult(c[!1 = @sid],smult(t[!1 = @sid_1],smult(a[!2 = @sid_2,!1 = @sid],G)))))))
This clause still contradicts the query.
A more detailed output of the traces is available with
  set traceDisplay = long.

new s: sskey creating s_3 at {1}

out(cout, ~M) with ~M = pk(s_3) at {2}

new cht: channel creating cht_1 at {24} in copy a_1

out(term, ~M_1) with ~M_1 = cht_1 at {25} in copy a_1

new t: scalar creating t_1 at {27} in copy a_1

new c: scalar creating c_2 at {5} in copy a_2

new chc: channel creating chc_1 at {7} in copy a_2, a_3

out(card, ~M_2) with ~M_2 = chc_1 at {8} in copy a_2, a_3

new a: scalar creating a_4 at {11} in copy a_2, a_3

event snd1(smult(a_4,smult(c_2,G))) at {12} in copy a_2, a_3

out(chc_1, ~M_3) with ~M_3 = smult(a_4,smult(c_2,G)) at {13} in copy a_2, a_3

in(cht_1, ~M_3) with ~M_3 = smult(c_2,smult(a_4,G)) at {28} in copy a_1

event rec1(smult(c_2,smult(a_4,G))) at {29} in copy a_1

event snd2(smult(t_1,G)) at {30} in copy a_1

out(cht_1, ~M_4) with ~M_4 = smult(t_1,G) at {31} in copy a_1

in(chc_1, ~M_4) with ~M_4 = smult(t_1,G) at {14} in copy a_2, a_3

event rec2(smult(t_1,G)) at {15} in copy a_2, a_3

event cardTerm(h(smult(a_4,smult(c_2,smult(t_1,G)))),enc(((a_4,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s_3))),h(smult(a_4,smult(c_2,smult(t_1,G)))))) at {19} in copy a_2, a_3

event CRunning(h(smult(a_4,smult(c_2,smult(t_1,G)))),smult(a_4,smult(c_2,G)),smult(t_1,G),enc(((a_4,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s_3))),h(smult(a_4,smult(c_2,smult(t_1,G)))))) at {20} in copy a_2, a_3

out(chc_1, ~M_5) with ~M_5 = enc(((a_4,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s_3))),h(smult(a_4,smult(c_2,smult(t_1,G))))) at {21} in copy a_2, a_3

in(cht_1, ~M_5) with ~M_5 = enc(((a_4,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s_3))),h(smult(c_2,smult(t_1,smult(a_4,G))))) at {32} in copy a_1

event terminalTerm(h(smult(t_1,smult(c_2,smult(a_4,G)))),enc(((a_4,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s_3))),h(smult(c_2,smult(t_1,smult(a_4,G)))))) at {36} in copy a_1 (goal)

The event terminalTerm(h(smult(c_2,smult(t_1,smult(a_4,G)))),enc(((a_4,smult(c_2,G)),(smult(c_2,G),sign(smult(c_2,G),s_3))),h(smult(c_2,smult(t_1,smult(a_4,G)))))) is executed at {36} in copy a_1.
A trace has been found.
RESULT not event(terminalTerm(k_2,z2_1)) is false.

--------------------------------------------------------------
Verification summary:

Query inj-event(TCommit(k_2,z1_1,z2_1,m)) ==> inj-event(CRunning(k_2,z1_1,z2_1,m)) is true.

Query not event(TCommit(k_2,z1_1,z2_1,m)) is false.

Query inj-event(terminalTerm(k_2,z2_1)) ==> (inj-event(rec1(z1_1)) ==> inj-event(snd1(z1_1))) is true.

Query inj-event(terminalTerm(k_2,z2_1)) ==> (inj-event(rec2(y_1)) ==> inj-event(snd2(y_1))) is true.

Query inj-event(terminalTerm(k_2,z2_1)) ==> inj-event(cardTerm(k_2,z2_1)) is true.

Query not event(terminalTerm(k_2,z2_1)) is false.

--------------------------------------------------------------
